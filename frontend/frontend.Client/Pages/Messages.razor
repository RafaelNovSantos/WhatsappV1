

@*@page "/{ContacId}"*@
@page "/f"

@inject IJSRuntime JSRuntime


<PageTitle>Chat</PageTitle>

<div class="d-flex flex-grow-1 flex-row " style="position: fixed; height: 100vh; width: 100vw;">
    <!-- Barra lateral com contatos -->
    <MudPaper Elevation="25" Class="pa-3" Style="width: 25%; overflow: auto; background-color: #f5f5f5;">
        <MudTextField T="string" Placeholder="Buscar mensagens" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search" />

        <MudToolBar Dense="true" Class="mt-4">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2 text-primary">#</MudText>
            <MudText Typo="Typo.h6" Color="Color.Primary">Contatos</MudText>
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh; overflow:auto;">
            <MudList T="ChatService" Clickable="true">
                @foreach (var chat in ChatService.Chats)
                {
                <MudListItem T="Chat" Class="pa-0 mb-3" OnClick="@(() => LoadUserChat(chat.Username))">
                    <div class="d-flex flex-row align-items-center">
                        <MudAvatar Color="@(chat.Username == ContactId ? Color.Primary : Color.Dark)" Style="height:40px; width:40px;">
                            @chat.Username.ToUpper().FirstOrDefault()
                        </MudAvatar>
                        <div class="ml-3">
                            <MudText Typo="Typo.subtitle2">@chat.Username</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Primary">@chat.Tag</MudText>
                            @if (chat.HasUnreadMessages)
                            {
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" Class="ml-1"/>
                            }
                        </div>
                    </div>
                </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>

    <!-- Área Principal de Chat -->
    <MudPaper Elevation="25" Class="flex-grow-1  " Style="width: 100vw; background: #fafafa">
        <MudPaper Width="100%" >
        <!-- Barra de título do chat -->
        <MudToolBar Dense="true" Class="px-4">
            @if (string.IsNullOrEmpty(ContactId))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person"  Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.h6" Color="Color.Primary">Chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }

            <div Class="full-width flex-end" >

            <MudMenu FullWidth="true">
                <ActivatorContent>
                    <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Transferir</MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>Profile</MudMenuItem>
                    <MudMenuItem>Theme</MudMenuItem>
                    <MudMenuItem>Usage</MudMenuItem>
                    <MudMenuItem>Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>

            <MudMenu FullWidth="true">
                <ActivatorContent>
                    <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Etiquetas</MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>Profile</MudMenuItem>
                    <MudMenuItem>Theme</MudMenuItem>
                    <MudMenuItem>Usage</MudMenuItem>
                    <MudMenuItem>Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>

            <MudMenu FullWidth="true">
                <ActivatorContent>
                    <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Agendar</MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>Profile</MudMenuItem>
                    <MudMenuItem>Theme</MudMenuItem>
                    <MudMenuItem>Usage</MudMenuItem>
                    <MudMenuItem>Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>

            <MudMenu FullWidth="true">
                <ActivatorContent>
                    <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Finalizar</MudChip>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>Profile</MudMenuItem>
                    <MudMenuItem>Theme</MudMenuItem>
                    <MudMenuItem>Usage</MudMenuItem>
                    <MudMenuItem>Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>       
            
            <MudMenu AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Archive">Arquivar Chat</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Outlined.NotificationsOff">Silenciar Chat</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Block">Bloquear</MudMenuItem>
            </MudMenu>
            </div>
        </MudToolBar>
       </MudPaper>
        <!-- Área de mensagens -->
        <MudPaper    Style="height: calc(100vh - 182px);"  >
        <div class="d-flex flex-column px-4" style="height:100%;  overflow:auto; background-image: url('images/fundo_Whatsapp.png'); background-size: cover; background-position: center;" id="chatContainer">      @foreach (var message in ChatService.Messages.Where(m => m.Sender == ContactId || m.Receiver == ContactId))
            {
            @if (message.Sender == "Você")
            {
            <div class="d-flex my-4 justify-end" >
                <!-- Mensagens enviadas por você -->
                <div class="message-bubble" style="max-width: 40vw; background-color: #def9c8; overflow: auto;">
                    <MudText Typo="Typo.body1" Style="font-weight: bold;">@message.Sender</MudText>
                    <pre style=" white-space: normal;
    word-wrap: break-word;" Typo="Typo.body2">@message.Content</pre>
                    <div class="justify-end d-flex">
                        <MudText Typo="Typo.caption" Style=" font-size: xx-small!important; text-align: right; color: #666;">
                            @DateTime.Now.ToString("HH:mm'h'")
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify iconify--ph" width="1em" height="1em" viewBox="0 0 256 256" style="vertical-align: -0.125em;"><path fill="currentColor" d="m152.41 88.56l-89.6 88a12 12 0 0 1-16.82 0l-38.4-37.71a12 12 0 0 1 16.82-17.13l30 29.46l81.19-79.74a12 12 0 0 1 16.82 17.12Zm96.15-17a12 12 0 0 0-17-.15l-81.16 79.77l-7.88-7.74a12 12 0 0 0-16.82 17.12l16.29 16a12 12 0 0 0 16.82 0l89.6-88a12 12 0 0 0 .15-16.97Z"></path></svg>
                        </MudText>
                    </div>
                    </div>
            </div>
            }
            else
            {
                <!-- Mensagens enviadas por outros usuários -->
                <div class="d-flex my-4" >
                    @if(group == true)
                    {
                        <div class="mr-2">
                            <MudAvatar Color="Color.Secondary" Style="height:40px; width:40px;">@message.Sender.ToUpper().FirstOrDefault()</MudAvatar>
                        </div>
                    }
                    <div class="message-bubble" style="height:100%; background-color: white; overflow: auto;">
                        @if(group == true)
                        {
                            <pre Typo="Typo.body1" Style="font-weight: bold; white-space: normal;
    word-wrap: break-word;">@message.Sender</pre>
                        }
                        <pre Typo="Typo.body2" style=" white-space: normal;
    word-wrap: break-word;">@message.Content</pre>
                        <div class="justify-end d-flex">
                            <MudText Typo="Typo.caption" Style=" font-size: xx-small!important; text-align: right; color: #666;">
                                @DateTime.Now.ToString("HH:mm'h'")
                            </MudText>
                        </div>
                    </div>
                </div>
            }
            }
        </div>
</MudPaper>

        <!-- Campo para envio de mensagem -->
        <MudPaper Style="background-color: #e6e6e6"  Class="d-flex justify-center pt-2 pb-2 m-0" Width="100%" Height="10vh">




            <div class="messageBox mud-elevation-1">
                <div class="fileUploadWrapper">
                    <MudMenu AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.Add" AriaLabel="Abrir menu">
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Image">
                            Foto e Vídeo
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Filled.FileUpload">
                            Documento
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Info" Icon="@Icons.Material.Filled.Contacts">
                            Contato
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Comment">
                            Comentário
                        </MudMenuItem>
                    </MudMenu>

                </div>
                <textarea 
                          @bind="newMessageContent"
                          @oninput="e => newMessageContent = e.Value.ToString()"
                          @onkeydown="HandleKeyDown"
                          placeholder="Mensagem"
                          id="messageInput"
                          style="resize: none;"></textarea>
                <button id="sendButton" @onclick="SendMessage">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 664 663">
                        <path
                            fill="none"
                            d="M646.293 331.888L17.7538 17.6187L155.245 331.888M646.293 331.888L17.753 646.157L155.245 331.888M646.293 331.888L318.735 330.228L155.245 331.888"
                        ></path>
                        <path
                            stroke-linejoin="round"
                            stroke-linecap="round"
                            stroke-width="33.67"
                            stroke="#6c6c6c"
                            d="M646.293 331.888L17.7538 17.6187L155.245 331.888M646.293 331.888L17.753 646.157L155.245 331.888M646.293 331.888L318.735 330.228L155.245 331.888"
                        ></path>
                    </svg>
                </button>
            </div>


        </MudPaper>
       

    </MudPaper>
    
</div>




<script>

    function scrollToElement(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            // Rola até o final do elemento
            element.scrollTop = element.scrollHeight;
            console.log(`Rolagem até o final do elemento com ID: ${elementId} realizada com sucesso.`);

            // Agora rola para 2000px do topo (ou outro valor desejado)
            setTimeout(() => {
                element.scrollTop = 2000; // Substitua o 2000 por qualquer valor que deseja
                console.log(`Rolagem para 2000px no elemento com ID: ${elementId} realizada com sucesso.`);
            }, 1); // Atraso para garantir que a rolagem para o final tenha ocorrido
        } else {
            console.log(`Elemento com ID: ${elementId} não encontrado.`);
        }
    }

</script>

@code {
    public Origin TransformOrigin { get; set; } = Origin.BottomCenter;
    public Origin AnchorOrigin { get; set; } = Origin.TopCenter;
    private bool group = false;
    private bool IsOnline = false;
    private bool HasUnreadMessages = false;
    public ChatService ChatService = new ChatService();

    
    // Variáveis para armazenar o ID e o email do contato atual
    [Parameter]
    public string ContactId { get; set; } // ID do contato (usado na barra de título)

    private void LoadUserChat(string username)
    {
        ContactId = username;
        StateHasChanged(); // Atualiza a interface
    }


    private string ContactEmail
    {
        get
        {
            var chat = ChatService.Chats.FirstOrDefault(c => c.Username == ContactId);
            return chat != null ? chat.Username : "Unknown";
        }
    }

   
    private bool isProcessing = false;  // Flag para evitar múltiplos processos simultâneos
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        // Se já estiver processando, ignora o evento
        if (isProcessing)
            return;

        // Marca como processando
        isProcessing = true;

        await Task.Run(async () =>
        {
            if (e.Key == "Enter" && !e.ShiftKey)
            {
                // Encontra a última ocorrência de '\n' e remove
                int lastIndex = newMessageContent.LastIndexOf('\n');
                if (string.IsNullOrEmpty(newMessageContent))
                {
                    newMessageContent = string.Empty;
                }

                if (lastIndex >= 0)
                {
                    newMessageContent = newMessageContent.Remove(lastIndex, 1);
                }

                // Verifica se o conteúdo está vazio ou contém apenas quebras de linha
                if (string.IsNullOrWhiteSpace(newMessageContent))
                {
                    newMessageContent = string.Empty;
                }

                // Envia a mensagem se não estiver vazia
                if (!string.IsNullOrEmpty(newMessageContent))
                {
                    SendMessage();
                    newMessageContent = string.Empty; // Limpa o campo de entrada após o envio
                    await JSRuntime.InvokeVoidAsync("scrollToElement", "chatContainer");
                }
            }
        });

        // Marca como não processando após o envio
        isProcessing = false;
    }


    
    
    private string newMessageContent;


    private async void SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageContent) && !string.IsNullOrEmpty(ContactId))
        {
            ChatService.Messages.Add(new Message
            {
                Sender = "Você",
                Receiver = ContactId,
                Content = newMessageContent,
                Timestamp = DateTime.Now
            });

            newMessageContent = string.Empty; // Limpa o campo de entrada
            
            StateHasChanged(); // Atualiza a interface
          
        }
    }


    

}
