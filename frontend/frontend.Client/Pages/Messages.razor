

@*@page "/{ContacId}"*@
@page "/"

@inject IJSRuntime JsRuntime



<PageTitle>Chat</PageTitle>

<div class="d-flex flex-grow-1 flex-row " style="position: fixed; height: 100vh; width: 100vw;">

    <!-- Barra lateral com contatos -->
    <ContactSidebar
        contactHide="@contactHide"
        width100="@width100"
        SelectedContactId="@ContactId"
        Chats="_chatService.Chats"
        OnChatSelected="LoadUserChat"/>


    <!-- Área Principal de Chat -->
    <MudPaper Elevation="25" Class="flex-grow-1" hidden="@chatHide" Style="width: 100vw; background: #fafafa">
        <ChatToolBar ContactId="@ContactId" ContactHideChanged="OnContactHideChanged" ContactEmail="@ContactEmail"/>

        <!-- Área de mensagens -->
        <MudPaper Style="height: calc(100vh - 182px);">
            <div class="d-flex flex-column px-4" style="height:100%;  overflow:auto; background-image: url('images/fundo_Whatsapp.png'); background-size: cover; background-position: center;" id="chatContainer">
                @foreach (var message in _chatService.Messages.Where(m => m.Sender == ContactId || m.Receiver == ContactId))
                {
                    <ChatMessage Sender="@message.Sender"
                                 Content="@message.Content"
                                 SentAt="@message.SentAt"
                                 _group="@_group"/>
                }
            </div>

        </MudPaper>


        <!-- Campo para envio de mensagem -->
        <MudPaper Style="background-color: #e6e6e6" Class="d-flex justify-center pt-2 pb-2 m-0" Width="100%" Height="10vh">
<div class="messageBox mud-elevation-1">
                <div class="fileUploadWrapper">
                    <MudMenu  AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.Add" AriaLabel="Abrir menu">
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Image">
                            Foto e Vídeo
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Filled.FileUpload">
                            Documento
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Info" Icon="@Icons.Material.Filled.Contacts">
                            Contato
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Comment">
                            Comentário
                        </MudMenuItem>
                    </MudMenu>

                </div>
                <textarea
                    @bind="_newMessageContent"
                    @oninput="e => _newMessageContent = e.Value.ToString()"
                    @onkeyup="HandleKeyDown"
                    placeholder="Mensagem"
                    id="messageInput"
                    style="resize: none;"></textarea>
                <button id="sendButton" @onclick="SendMessage">
                    <img style="
width: 100%; height: 20px;" src="/Images/sendIcon.svg" alt="Send icon" />
                   
                </button>
            </div>


        </MudPaper>


    </MudPaper>

</div>




@code {
    private Origin TransformOrigin { get; set; } = Origin.BottomCenter;
    private Origin AnchorOrigin { get; set; } = Origin.TopCenter;
    private readonly bool _group = false;
    private readonly ChatService _chatService = new ChatService();
    private string _newMessageContent = "";
    private bool buttonHide = false;
    private bool chatHide = false;
    private bool ChatOpen = false;
    private ScreenSize screenSize = new ScreenSize();
    private string width100 = "";
    private bool contactHide = false;
    private bool contactOpen = false;



    private void OnContactHideChanged(bool newStatus)
    {
    
        buttonHide = newStatus;
        if (buttonHide == true && screenSize.Width <= 800) 
        {
            //Deixa somente a aba de contatos a mostra e com largra de 100%
            contactOpen = true;
            width100 = "w-full";
            chatHide = true;
            contactHide = false;
            buttonHide = false;
        }
        else
        {
            width100 = "";
            chatHide = false;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        width100 = "w-300px";
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
            var dotNetObjectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setDotNetResizeCallback", dotNetObjectReference);
            // Invoca o JavaScript para bloquear a tecla Enter
            await JSRuntime.InvokeVoidAsync("blockEnterKey", "#messageInput");
            // Atualiza o tamanho da tela após o primeiro carregamento
            // Chama a função getScreenSize para obter o tamanho inicial da tela
            screenSize = await JSRuntime.InvokeAsync<ScreenSize>("getScreenSize");
            
            StateHasChanged(); // Solicita uma atualização da interface
        }
        
    }

    [JSInvokable]
    public Task UpdateScreenSize(ScreenSize newScreenSize)
    {
        
        screenSize = newScreenSize; // Atualiza a propriedade screenSize
        if (screenSize.Width <= 800 && buttonHide == false && contactOpen == false)
        {
            contactHide = true;
            
            width100 = "";
        }
        else if (!contactOpen == true)
        {
            
            //deixa o chat e a aba de contatos a mostra quando a tela for maior que 800px
            contactOpen = false;
            contactHide = false;
            width100 = "w-300px";
            chatHide = false;
            
        }
        StateHasChanged(); // Solicita uma atualização da interface do usuário
        return Task.CompletedTask;
    }


    // Variáveis para armazenar o ID e o email do contato atual
    [Parameter]
    public string ContactId { get; set; } = ""; // ID do contato (usado na barra de título)


          
    
    private async void LoadUserChat(string username)
    {
        ContactId = username;
        
        
        if (buttonHide == false && contactOpen == true) 
        {
            contactOpen = false;
            chatHide = false;
            contactHide = true;
            width100 = "";

            if (screenSize.Width >= 800)
            {
                contactHide = false;
            }
            return;
}
        contactOpen = false;
        StateHasChanged(); // Atualiza a interface
       
    }

    private void HandleInput(ChangeEventArgs e)
    {
        _newMessageContent = e.Value?.ToString() ?? string.Empty;
    }
    
    private string ContactEmail
    {
        get
        {
            var chat = _chatService.Chats.FirstOrDefault(c => c.Username == ContactId);
            return chat != null ? chat.Username : "Unknown";
        }
    }

   
    private bool _isProcessing = false;  // Flag para evitar múltiplos processos simultâneos
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        // Se já estiver processando, ignora o evento
        if (_isProcessing)
            return;

        // Marca como processando
        _isProcessing = true;

        await Task.Run(async () =>
        {
            if (e.Key == "Enter" && !e.ShiftKey)
            {
                // Bloqueia qualquer caractere adicional após pressionar Enter

             
                if(System.Text.RegularExpressions.Regex.IsMatch(_newMessageContent, @"^\n*$"))
                {
                    _newMessageContent = string.Empty; // Limpa a mensagem se for só quebra de linha
                }
                // Envia a mensagem
                if (!string.IsNullOrEmpty(_newMessageContent) && !System.Text.RegularExpressions.Regex.IsMatch(_newMessageContent, @"^\n*$"))
                {
                    StateHasChanged();
                    // Conteúdo não é vazio e não contém apenas quebras de linha
                    SendMessage();
                    await JsRuntime.InvokeVoidAsync("scrollToElement", "chatContainer");
                }

            }

        });

        // Marca como não processando após o envio
        _isProcessing = false;
    }


    private  void SendMessage()
    {
        if (!string.IsNullOrEmpty(_newMessageContent) && !string.IsNullOrEmpty(ContactId))
        {
            _chatService.Messages.Add(new Message
            {
                Sender = "Você",
                Receiver = ContactId,
                Content = _newMessageContent,
                SentAt = DateTime.Now
            });

            _newMessageContent = string.Empty; // Limpa o campo de entrada
            
            StateHasChanged(); // Atualiza a interface
          
        }
    }
}
