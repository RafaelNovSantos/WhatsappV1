


@page "/"



<PageTitle>Chat</PageTitle>

<div class="d-flex flex-grow-1 flex-row " style="position: fixed; height: 100vh; width: 100vw;">
    <!-- Barra lateral com contatos -->
    <MudPaper Elevation="25" Class="pa-3" Style="width: 25%; overflow: auto; background-color: #f5f5f5;">
        <MudTextField T="string" Placeholder="Buscar mensagens" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search" />

        <MudToolBar Dense="true" Class="mt-4">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2 text-primary">#</MudText>
            <MudText Typo="Typo.h6" Color="Color.Primary">Contatos</MudText>
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh; overflow:auto;">
            <MudList T="ChatService" Clickable="true">
                @foreach (var chat in ChatService.Chats)
                {
                <MudListItem T="Chat" Class="pa-0 mb-3" OnClick="@(() => LoadUserChat(chat.Username))">
                    <div class="d-flex flex-row align-items-center">
                        <MudAvatar Color="@(chat.Username == ContactId ? Color.Primary : Color.Dark)" Style="height:40px; width:40px;">
                            @chat.Username.ToUpper().FirstOrDefault()
                        </MudAvatar>
                        <div class="ml-3">
                            <MudText Typo="Typo.subtitle2">@chat.Username</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Primary">@chat.Tag</MudText>
                            @if (chat.HasUnreadMessages)
                            {
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" Class="ml-1"/>
                            }
                        </div>
                    </div>
                </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>

    <!-- Área Principal de Chat -->
    <MudPaper Elevation="25" Class="py-4 flex-grow-1" Style="background: #fafafa;">
        <!-- Barra de título do chat -->
        <MudToolBar Dense="true" Class="px-4">
            @if (string.IsNullOrEmpty(ContactId))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.h6" Color="Color.Primary">Chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }

            <MudMenu AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Archive">Arquivar Chat</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Outlined.NotificationsOff">Silenciar Chat</MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Block">Bloquear</MudMenuItem>
            </MudMenu>
        </MudToolBar>

        <!-- Área de mensagens -->
        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:auto; background-image: url('images/fundo_Whatsapp.png'); background-size: cover; background-position: center;" id="chatContainer">
            @foreach (var message in ChatService.Messages)
            {
                @if (message.Sender == "Você")
                {
                    <div class="d-flex my-4" style="justify-content: end;">
                        <!-- Mensagens enviadas por você -->
                        <div class="message-bubble" style="background-color: #def9c8; overflow: auto;">
                            <MudText Typo="Typo.body1" Style="font-weight: bold;">@message.Sender</MudText>
                            <pre Typo="Typo.body2">@message.Content</pre>
                            <div class="justify-end d-flex">
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important; text-align: right; color: #666;">
                                    @DateTime.Now.ToString("HH:mm'h'")
                                </MudText>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Mensagens enviadas por outros usuários -->
                    <div class="d-flex my-4">
                        @if(group == true)
                        {
                            <div class="mr-2">
                                <MudAvatar Color="Color.Secondary" Style="height:40px; width:40px;">@message.Sender.ToUpper().FirstOrDefault()</MudAvatar>
                            </div>
                        }
                        <div class="message-bubble" style="background-color: white; overflow: auto;">
                            @if(group == true)
                            {
                                <MudText Typo="Typo.body1" Style="font-weight: bold;">@message.Sender</MudText>
                            }
                            <pre Typo="Typo.body2">@message.Content</pre>
                            <div class="justify-end d-flex">
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important; text-align: right; color: #666;">
                                    @DateTime.Now.ToString("HH:mm'h'")
                                </MudText>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Campo para envio de mensagem -->
        <div style="display: flex;">
            <MudMenu AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Abrir menu">
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Image">
                    Foto e Vídeo
                </MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Filled.FileUpload">
                    Documento
                </MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Info" Icon="@Icons.Material.Filled.Contacts">
                    Contato
                </MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Comment">
                    Comentário
                </MudMenuItem>
            </MudMenu>
            <MudTextField T="string" Immediate="true" @bind-Text="newMessageContent" @onkeyup="HandleKeyDown" Label="Mensagem" AutoGrow MaxLines="4" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="SendMessage"/>
   
        </div>
    </MudPaper>
</div>

<style>
    .message-bubble {
        max-width: 55%;
        padding: 8px 12px;
        border-radius: 18px;
        box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
        margin: 2px 0;
    }

    .chat-background {
        background-color: #f0f0f5;
        background-size: cover;
    }

    .message-input-container {
        display: flex;
        align-items: center;
        border-top: 1px solid #e0e0e0;
    }
</style>


<script>
// scripts.js
function scrollToBottom() {
window.scrollTo(0, document.body.scrollHeight);
}


</script>

@code {
    public Origin TransformOrigin { get; set; } = Origin.BottomCenter;
    public Origin AnchorOrigin { get; set; } = Origin.TopCenter;
    private bool group = false;
    private bool IsOnline = false;
    private bool HasUnreadMessages = false;
    public ChatService ChatService = new ChatService();

    
    // Variáveis para armazenar o ID e o email do contato atual
    [Parameter]
    public string ContactId { get; set; } // ID do contato (usado na barra de título)



    private string ContactEmail
    {
        get
        {
            var chat = ChatService.Chats.FirstOrDefault(c => c.Username == ContactId);
            return chat != null ? chat.Username : "Unknown";
        }
    }

   
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            // Encontra a última ocorrência de '\n' e remove apenas essa ocorrência
            int lastIndex = newMessageContent.LastIndexOf('\n');
            if (lastIndex >= 0)
            {
                newMessageContent = newMessageContent.Remove(lastIndex, 1);
            }
if(System.Text.RegularExpressions.Regex.IsMatch(newMessageContent, @"^\n*$"))
{
    newMessageContent = string.Empty;
}
            // Envia a mensagem se não estiver vazia
            if (!string.IsNullOrEmpty(newMessageContent) && !System.Text.RegularExpressions.Regex.IsMatch(newMessageContent, @"^\n*$"))
            {
                // Conteúdo não é vazio e não contém apenas quebras de linha
                await SendMessage();
            }

        }
    }

    
    
    private string newMessageContent;


    private async Task SendMessage()
    {
        if (newMessageContent != "")
        {
            ChatService.Messages.Add(new Message { Sender = "Você", Content = newMessageContent });
            newMessageContent = string.Empty; // Limpa o campo de entrada após o envio

            // Chama o método JS para fazer scroll até a última mensagem
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }
    }

    private void LoadUserChat(string contactId)
    {
        // Lógica para carregar o chat do usuário
        ContactId = contactId;
        StateHasChanged(); // Força a atualização da interface
    }


    

}
