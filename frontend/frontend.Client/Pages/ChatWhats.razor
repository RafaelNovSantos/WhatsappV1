
@page "/"
<PageTitle>Chat</PageTitle>

<div class="d-flex flex-grow-1 flex-row " style="height: 90%;">

    <!-- Barra lateral com contatos -->
    <MudPaper Elevation="25" Class="pa-3" Style="width: 30%; overflow: auto;">
        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText>
            <MudText Typo="Typo.h6">Contacts</MudText>
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:auto;">
            <!-- Definindo explicitamente o tipo de dados 'Chat' para MudList e MudListItem -->
            <MudList T="Chat" Clickable="true">
                @foreach (var chat in Chats)
                {
                    <MudListItem T="Chat" Class="pa-0 mb-4 px-2" OnClick="@(() => LoadUserChat(chat.Username))">
                        <div class="d-flex flex-row mt-n1 mb-n1">
                            <div class="mr-4">
                                
                                    <MudAvatar Color="@(chat.Username == ContactId ? Color.Secondary : Color.Dark)" Style="height:50px; width:50px;">
                                        @chat.Username.ToUpper().FirstOrDefault()
                                    </MudAvatar>
                                
                            </div>
                            <div>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2">@chat.Username</MudText>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@chat.Tag</MudText>
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>

    </MudPaper>
    
    <!-- Área Principal de Chat -->
    <MudPaper Elevation="25" Class="py-4 flex-grow-1 mr-2" >
        <!-- Barra de título do chat -->
        <MudToolBar Dense="true">
            @if (string.IsNullOrEmpty(ContactId))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">Chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }
        </MudToolBar>

        <!-- Área de mensagens -->
        <div class="d-flex flex-column px-4"  style="max-height:65vh;min-height:65vh; overflow:auto; background-image: url('images/fundo_Whatsapp.png'); background-size: cover; background-position: center;" id="chatContainer">
            @foreach (var message in Messages)
            {
                @if (message.Sender == "Você")
                {
            <div class="d-flex my-4" style="justify-content: end;">
              
                <!-- Mensagens enviadas por você -->
                


                    <div class="message-bubble" style="background-color: #def9c8; overflow: auto;" >
                        <MudText Typo="Typo.body1" Style="font-weight: bold;">@message.Sender</MudText>
                        <pre Typo="Typo.body2">@message.Content</pre>
                        <div class="justify-end d-flex">
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important; text-align: right; color: #666;">
                                @DateTime.Now.ToString("HH:mm'h'")

                            </MudText>
                        </div>
                    </div>
              
                </div>
                }
                else
                {
                <!-- Mensagens enviadas por outros usuários -->
                <div class="d-flex my-4" >

                    @if(group == true){
                    <div class="mr-2">
                        <MudAvatar Color="Color.Secondary" Style="height:40px; width:40px;">@message.Sender.ToUpper().FirstOrDefault()</MudAvatar>
                    </div>
                    }

                    <div class="message-bubble" style="background-color: white; overflow: auto;">
                        @if(group == true){
                            <MudText Typo="Typo.body1" Style="font-weight: bold;">@message.Sender</MudText>
                        }
                        <pre Typo="Typo.body2">@message.Content</pre>
                        <div class="justify-end d-flex">
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important; text-align: right; color: #666;">
                                @DateTime.Now.ToString("HH:mm'h'")

                            </MudText>
                        </div>
                    </div>
                </div>
                }
            
            }
        </div>

        <!-- Campo para envio de mensagem -->
        <div style="display: flex;">

            <MudMenu AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.MoreVert"
                     AriaLabel="Abrir menu" >

                <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Image"
                >
                    Foto e Vídeo
                </MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Filled.FileUpload">
                   Documento
                </MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Info" Icon="@Icons.Material.Filled.Contacts">
                    Contato
                </MudMenuItem>
                <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Comment" > Comentário</MudMenuItem>
                
            </MudMenu>
            <MudTextField  T="string" Immediate="true" @bind-Text="newMessageContent" @onkeyup="HandleKeyDown" Label="Mensagem" AutoGrow MaxLines="4" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="SendMessage"/>


        </div>
    </MudPaper>


</div>

<style>
    .message-bubble {
        max-width: 60%;
        padding: 10px 15px;
        border-radius: 15px;
        box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    /* Balão para mensagens enviadas */
    .message-bubble::after {
        content: '';
        position: absolute;
        bottom: 5px;
        right: -10px;
        width: 0;
        height: 0;
        border: 10px solid transparent;
        border-top-color: #DCF8C6; /* Cor do balão de mensagens enviadas */
        border-bottom: 0;
        margin-left: -5px;
    }

    /* Balão para mensagens recebidas */
    .d-flex.flex-row .message-bubble::after {
        left: -10px;
        right: auto;
        border-top-color: #FFF; /* Cor do balão de mensagens recebidas */
        border-bottom: 0;
        border-left: 0;
    }
</style>

<script>
// scripts.js
function scrollToBottom() {
window.scrollTo(0, document.body.scrollHeight);
}


</script>

@code {
    public Origin TransformOrigin { get; set; } = Origin.BottomCenter;
    public Origin AnchorOrigin { get; set; } = Origin.TopCenter;
    private bool group = false;
    
    // Variáveis para armazenar o ID e o email do contato atual
    [Parameter]
    public string ContactId { get; set; } // ID do contato (usado na barra de título)
  

    private string ContactEmail
    {
        get
        {
            var chat = Chats.FirstOrDefault(c => c.Username == ContactId);
            return chat != null ? chat.Username : "Unknown";
        }
    }

   
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            // Encontra a última ocorrência de '\n' e remove apenas essa ocorrência
            int lastIndex = newMessageContent.LastIndexOf('\n');
            if (lastIndex >= 0)
            {
                newMessageContent = newMessageContent.Remove(lastIndex, 1);
            }
if(System.Text.RegularExpressions.Regex.IsMatch(newMessageContent, @"^\n*$"))
{
    newMessageContent = string.Empty;
}
            // Envia a mensagem se não estiver vazia
            if (!string.IsNullOrEmpty(newMessageContent) && !System.Text.RegularExpressions.Regex.IsMatch(newMessageContent, @"^\n*$"))
            {
                // Conteúdo não é vazio e não contém apenas quebras de linha
                await SendMessage();
            }

        }
    }

    
    
    private string newMessageContent;
    private List<Chat> Chats = new List<Chat>
    {
        new Chat { Username = "Alice", Tag = "ATA", AvatarUrl = "AvatarUrls/avatar1.png", Message = "Oi, pessoal!" },
        new Chat { Username = "Bob", Tag = "DEV", AvatarUrl = "AvatarUrls/avatar2.png", Message = "Alguém já viu a atualização?" },
        new Chat { Username = "Charlie", Tag = "SUP", AvatarUrl = "AvatarUrls/avatar3.png", Message = "Estou aqui para ajudar." }
        // Outros contatos...
    };

    private List<Message> Messages = new List<Message>
    {
        new Message { Sender = "Alice", Content = "Oi, como vai?" },
        new Message { Sender = "Bob", Content = "Tudo bem! E você?" },
        // Outras mensagens...
    };

    private async Task SendMessage()
    {
        if (newMessageContent != "")
        {
            Messages.Add(new Message { Sender = "Você", Content = newMessageContent });
            newMessageContent = string.Empty; // Limpa o campo de entrada após o envio

            // Chama o método JS para fazer scroll até a última mensagem
            await JSRuntime.InvokeVoidAsync("scrollToBottom");
        }
    }

    private void LoadUserChat(string contactId)
    {
        // Lógica para carregar o chat do usuário
        ContactId = contactId;
        StateHasChanged(); // Força a atualização da interface
    }

    private class Message
    {
        public string Sender { get; set; }
        public string Content { get; set; }
    }
    
    private class Chat
    {
        public string Username { get; set; }
        public string Tag { get; set; }
        public string AvatarUrl { get; set; }
        public string Message { get; set; }
    }
}
