


<MudPaper Elevation="25" hidden="@contactHide" Style="height: 100%;" Class="@width100">
   <MudPaper Class="d-flex" Style="padding: 10px 0px 10px 0px;
    background: #e6e6e6; justify-content: center;    align-items: center;">
       <MudIconButton Icon="@Icons.Material.Filled.PersonAddAlt1" aria-label="delete" />
       <div class="InputContainer mud-elevation-1">
           <input type="text"             placeholder="Buscar mensagens"
          
                  @bind="searchTerm"
                  @bind:event="oninput" name="text" class="searchinput" id="input" >


           <div class="border"></div>

           <label for="input" class="labelforsearch">
               <svg viewBox="0 0 512 512" class="searchIcon"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
           </label>

       </div>
       <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" aria-label="delete" />
       <MudIconButton Icon="@Icons.Material.Filled.FilterList" aria-label="delete" />
   </MudPaper>


    <MudTabs MinimumTabWidth="87px" Style="width: 100%" Rounded="true" Outlined="true" SliderColor="Color.Primary"  Centered="true" Color="Color.Dark">
        <MudTabPanel Icon="@Icons.Material.Filled.Api" BadgeData='"!"' BadgeColor="Color.Error">
            <div class="d-flex flex-column" style="overflow:auto;     height: calc(100vh - 118px);">
                <MudList T="ChatService" Color="@Color.Info">
                    @foreach (var chat in FilteredChats)
                    {
                    <MudListItem T="Chat" Class="" OnClick="@(() => OnChatSelected.InvokeAsync(chat.Username))">
                        <div class="d-flex flex-row align-items-center">
                            <MudAvatar Color="@(chat.Username == SelectedContactId ? Color.Primary : Color.Dark)" Style="height:40px; width:40px;">
                                @chat.Username.ToUpper().FirstOrDefault()
                            </MudAvatar>
                            <div class="ml-3">
                                <MudText Style="overflow: hidden;
    white-space: nowrap;" Typo="Typo.subtitle2" Color="Color.Secondary">@chat.Username</MudText>
                                <MudText Style="overflow: hidden;
    white-space: nowrap;" Typo="Typo.caption" Color="Color.Primary">@chat.Tag</MudText>
                                @if (chat.HasUnreadMessages)
                                {
                                <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" Class="ml-1" />
                                }
                            </div>
                        </div>
                    </MudListItem>
                    <MudDivider />
                    }
                </MudList>
            </div>
        </MudTabPanel>
        <MudTabPanel Icon="@Icons.Material.Filled.Build" BadgeData="1" BadgeColor="Color.Success" />
        <MudTabPanel Icon="@Icons.Material.Filled.BugReport" BadgeData="0" />
        <MudTabPanel Icon="@Icons.Material.Filled.AccessTime" BadgeDot="true" BadgeColor="Color.Error" />
    </MudTabs>
</MudPaper>

<style>

    .InputContainer {
        height: 40px;
        display: flex
    ;
        width: 100%;
        align-items: center;
        justify-content: center;
        background-color: rgb(255, 255, 255);
        border-radius: 10px;
        overflow: hidden;
        cursor: pointer;
        padding-right: 15px;
        /*margin: 20px;*/
    }

    .searchinput {
        width: 100%;
        height: 100%;
        border: none;
        outline: none;
        font-size: 0.9em;
        caret-color: rgb(255, 81, 0);
        padding-left: 20px;
    }

    .labelforsearch {
        cursor: pointer;
        margin: 10px;
        padding-top: 4px;
    }

    .searchIcon {
        width: 13px;
    }

    .border {
        height: 40%;
        width: 1.3px;
        background-color: rgb(223, 223, 223);
    }

    .micIcon {
        width: 12px;
    }

    .micButton {
        padding: 0px 15px 0px 12px;
        border: none;
        background-color: transparent;
        height: 40px;
        cursor: pointer;
        transition-duration: .3s;
    }

    .searchIcon path {
        fill: rgb(114, 114, 114);
    }

    .micIcon path {
        fill: rgb(255, 81, 0);
    }

    .micButton:hover {
        background-color: rgb(255, 230, 230);
        transition-duration: .3s;
    }


</style>

@code {
    private string _selectedContactId = string.Empty;
    private bool _buttonHide = false;
    private bool _contactHide = false;
    private string _width100 = "";
    private List<Chat> _chats = new();
    private EventCallback<string> _onChatSelected;
    private string searchTerm = string.Empty; // Termo de busca
    private List<Chat> FilteredChats => 
        string.IsNullOrWhiteSpace(searchTerm) 
            ? Chats 
            : Chats.Where(c => c.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) 
                               || c.Tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();



    // Método que será disparado quando o usuário digitar
    private void FilterChats(KeyboardEventArgs e)
    {
        StateHasChanged(); // Atualiza o componente
    }
  

    [Parameter]
    public string SelectedContactId
    {
        get => _selectedContactId;
        set => _selectedContactId = value;
    }
    
    [Parameter]
    public string width100
    {
        get => _width100;
        set => _width100 = value;
    }

    [Parameter]
    public bool contactHide
    {
        get => _contactHide;
        set => _contactHide = value;
    }

    [Parameter]
    public List<Chat> Chats
    {
        get => _chats;
        set => _chats = value;
    }

    [Parameter]
    public EventCallback<string> OnChatSelected
    {
        get => _onChatSelected;
        set => _onChatSelected = value;
    }

    
}