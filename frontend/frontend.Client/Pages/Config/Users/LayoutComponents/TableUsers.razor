

<MudTable T="UsersClass" Items="@Users"
          Filter="new Func<UsersClass, bool>(Procurar)"
          ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End"       EditTrigger="TableEditTrigger.EditButton"   Hover="true"
          MultiSelection="true"
          Bordered="true" Dense="true" Class="tableEdit" ReadOnly="@_readOnly"
          @bind-SelectedItems="selectedItems">


<ToolBarContent >

        <MudText Class="MudTextSize">Usuários</MudText>
        <div class="InputContainer ma-5 mud-elevation-1">
            <input type="text"             placeholder="Procurar..."

                   @bind="criterio"
                   name="text" class="searchinput" id="input" >
            <div class="border"></div>

            <label for="input" class="labelforsearch">
                <svg viewBox="0 0 512 512" class="searchIcon"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
            </label>

        </div>

    <button class="bookmarkBtn ma-1" @onclick="() => StartAddItem(new UsersClass())">
            <span class="IconContainer">
                <MudIcon Color="Color.Dark" Icon="@Icons.Material.Outlined.Add"></MudIcon>
            </span>
        <p class="text">Adicionar</p>
    </button>

    <button class="bookmarkBtn ma-1" @onclick="DeleteSelectedItems">
            <span class="IconContainer">
                <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.Delete"></MudIcon>
            </span>
        <p class="text">Deletar</p>
    </button>


</ToolBarContent>

    <HeaderContent >
    

      

   
      

        <MudTh>
            <MudTableSortLabel SortBy="new Func<UsersClass, object>(e => e.Name)">
                Usuários
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel SortBy="new Func<UsersClass, object>(e => e.Name)">
                E-mail
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel SortBy="new Func<UsersClass, object>(e => e.Name)">
                Status
            </MudTableSortLabel>
        </MudTh>

        <MudTh>
            <MudTableSortLabel SortBy="new Func<UsersClass, object>(e => e.Name)">
                Perfil
            </MudTableSortLabel>
        </MudTh>

    </HeaderContent>

    <RowTemplate>
     
        <MudTd DataLabel="Usuários">@context.Name</MudTd>
        <MudTd DataLabel="E-mail">@context.Email</MudTd>
        @if(_userclass.Status == true){
            <MudTd DataLabel="Status">
                <MudIcon Icon="@Icons.Material.Outlined.CheckCircleOutline"></MudIcon>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Status">
                <MudIcon Icon="@Icons.Material.Outlined.Clear"></MudIcon>
            </MudTd>
        }

        <MudTd DataLabel="Perfil">@context.Profile</MudTd>
        

      
    </RowTemplate>
    <RowEditingTemplate>

     
        <MudTd DataLabel="Usuários">
            <MudTextField  @bind-Value="context.Name" Required />
        </MudTd>
        <MudTd DataLabel="E-mail">
            <MudTextField  @bind-Value="context.Email" Required />
        </MudTd>

        
            <MudTd DataLabel="Status">
                <label style="font-size: 12px !important;"  class="switch">
                    <input type="checkbox"
                           onclick="@(() => ToggleBoolean(context, nameof(UsersClass.Status)))"
                           checked="@context.Status" />
                    <span class="slider"></span>
                </label>
            </MudTd>
      
        
        <MudTd DataLabel="Perfil">
            <MudTextField  @bind-Value="context.Profile" Required />
        </MudTd>




    </RowEditingTemplate>

    <PagerContent >
        <MudTablePager PageSizeOptions="[5, 15, 25, 50, 100]"


                       RowsPerPageString="Máximo de usuários por página:"

        />
    </PagerContent>
</MudTable>


@code{
    [Parameter]
    public List<UsersClass> Users { get; set; } = new List<UsersClass>();

    bool _statusUser = true;

private HashSet<UsersClass> selectedItems = new HashSet<UsersClass>();  // Changed to HashSet

    protected override async Task OnInitializedAsync()
    {
        // Exemplo de inicialização
        Users = new List<UsersClass>
        {
            new UsersClass { Id = 1, Name = "Rafael", Email = "rafael@email.com.br", Status = true, Profile = "Admin"},
            new UsersClass { Id = 2, Name = "Lucas", Email = "lucas@email.com.br", Status = true, Profile = "Admin"},
        };
    }


    public Origin TransformOrigin { get; set; } = Origin.TopCenter;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;
    public UsersClass _userclass = new UsersClass();
    private string criterio = "";
    private bool _readOnly;

    private async Task StartAddItem(UsersClass item)
    {
        var options = new DialogOptions { CloseButton = true };
        var dialog = DialogService.Show<DialogAddUsers>("Adicionar resposta rápida", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is UsersClass newItem)
        {
            Users.Add(newItem);
            StateHasChanged();
        }
    }

    private void DeleteSelectedItems()
    {
        if (selectedItems.Count > 0)
        {
            foreach (var item in selectedItems)
            {
                Users.Remove(item);
            }
            selectedItems.Clear();
            StateHasChanged(); // Refresh the table after deletion
        }
    }

  private void ToggleBoolean(object targetObject, string propertyName)
{
    var property = targetObject.GetType().GetProperty(propertyName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);

    if (property != null && property.PropertyType == typeof(bool))
    {
        bool currentValue = (bool)property.GetValue(targetObject);
        property.SetValue(targetObject, !currentValue);

        // Atualiza diretamente o item na lista
        var user = Users.FirstOrDefault(u => u == targetObject);
        if (user != null)
        {
            // Atualiza o item na lista e notifica o Blazor para re-renderizar
            user.Status = !currentValue;
        }

        StateHasChanged(); // Atualiza a interface
    }
    else
    {
        Console.WriteLine($"Propriedade '{propertyName}' não encontrada ou não é do tipo bool.");
    }
}



    private bool Procurar(UsersClass welcomemessage)
    {
        if (string.IsNullOrWhiteSpace(criterio))
            return true;

        return welcomemessage.Id.ToString().Contains(criterio, StringComparison.OrdinalIgnoreCase)
               || welcomemessage.Name.Contains(criterio, StringComparison.OrdinalIgnoreCase);
    }

 

}
