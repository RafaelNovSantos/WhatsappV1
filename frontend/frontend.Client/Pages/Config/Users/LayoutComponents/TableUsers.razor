

<MudTable T="UsersClass" Items="@Users"
          Filter="new Func<UsersClass, bool>(Procurar)"
          ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End"       EditTrigger="TableEditTrigger.EditButton"   Hover="true"
          MultiSelection="true"
          Bordered="true" Dense="true" Class="tableEdit" ReadOnly="@_readOnly">


<ToolBarContent >

        <MudText Class="MudTextSize">Usuários</MudText>
        @*<MudTextField @bind-Value="criterio"
                      Placeholder="Procurar..."
                      Class="searchBar input" Style="    display: flex;
    justify-content: end;" />*@
        <div class="InputContainer ma-5 mud-elevation-1">
            <input type="text"             placeholder="Procurar..."

                   @bind="criterio"
                   name="text" class="searchinput" id="input" >
            <div class="border"></div>

            <label for="input" class="labelforsearch">
                <svg viewBox="0 0 512 512" class="searchIcon"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
            </label>

        </div>

    <button class="bookmarkBtn ma-1">
            <span class="IconContainer">
                <MudIcon Color="Color.Dark" Icon="@Icons.Material.Outlined.Add"></MudIcon>
            </span>
        <p class="text">Adicionar</p>
    </button>

    <button class="bookmarkBtn ma-1">
  <span class="IconContainer">
   <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.Delete"></MudIcon>
  </span>
        <p class="text">Deletar</p>
    </button>


</ToolBarContent>

    <HeaderContent >
    

        <MudTh>
            <MudTableSortLabel SortBy="new Func<UsersClass, object>(e => e.Id)">
                ID
            </MudTableSortLabel>
        </MudTh>


   
      

        <MudTh>
            <MudTableSortLabel SortBy="new Func<UsersClass, object>(e => e.Name)">
               Usuários
            </MudTableSortLabel>
        </MudTh>

    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Usuários">@context.Name</MudTd>

      
    </RowTemplate>
    <RowEditingTemplate>

        <MudTd DataLabel="ID">
            <MudTextField  @bind-Value="context.Id" Required />
        </MudTd>

        <MudTd DataLabel="Usuários">
            <MudTextField  @bind-Value="context.Name" Required />
        </MudTd>






    </RowEditingTemplate>

    <PagerContent >
        <MudTablePager PageSizeOptions="[5, 15, 25, 50, 100]"


                       RowsPerPageString="Máximo de usuários por página:"

        />
    </PagerContent>
</MudTable>


@code{
    [Parameter]
    public List<UsersClass> Users { get; set; } = new List<UsersClass>();
    
    /*private List<QuickResponse> quickResponses = new List<QuickResponse>();*/

    protected override async Task OnInitializedAsync()
    {
        // Exemplo de inicialização
        Users = new List<UsersClass>
        {
            new UsersClass { Id = 1, Name = "Rafael" },
            new UsersClass { Id = 2, Name = "Lucas" },
        };
    }


    public Origin TransformOrigin { get; set; } = Origin.TopCenter;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;
    private string criterio = "";
    private bool _readOnly;


    private bool Procurar(UsersClass welcomemessage)
    {
        if (string.IsNullOrWhiteSpace(criterio))
            return true;

        return welcomemessage.Id.ToString().Contains(criterio, StringComparison.OrdinalIgnoreCase)
               || welcomemessage.Name.Contains(criterio, StringComparison.OrdinalIgnoreCase);
    }

 

}
