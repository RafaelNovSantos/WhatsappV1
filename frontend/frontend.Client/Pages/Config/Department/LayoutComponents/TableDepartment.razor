

<MudTable T="DepartmentClass" Items="@Departments"
          Filter="new Func<DepartmentClass, bool>(Procurar)"
          ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End"       EditTrigger="TableEditTrigger.EditButton"   Hover="true"
          MultiSelection="true"
          Bordered="true" Dense="true" Class="tableEdit" ReadOnly="@_readOnly"
          @bind-SelectedItems="selectedItems">


    <ToolBarContent >

        <MudText Class="MudTextSize">Departamentos</MudText>
      
        <div class="InputContainer ma-5 mud-elevation-1">
            <input type="text"             placeholder="Procurar..."

                   @bind="criterio"
                   name="text" class="searchinput" id="input" >
            <div class="border"></div>

            <label for="input" class="labelforsearch">
                <svg viewBox="0 0 512 512" class="searchIcon"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
            </label>

        </div>

        <button class="bookmarkBtn ma-1" @onclick="() => StartAddItem(new DepartmentClass())">
            <span class="IconContainer">
                <MudIcon Color="Color.Dark" Icon="@Icons.Material.Outlined.Add"></MudIcon>
            </span>
            <p class="text">Adicionar</p>
        </button>

        <button class="bookmarkBtn ma-1" @onclick="DeleteSelectedItems">
            <span class="IconContainer">
                <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.Delete"></MudIcon>
            </span>
            <p class="text">Deletar</p>
        </button>

    </ToolBarContent>

    <HeaderContent >


        <MudTh>
            <MudTableSortLabel SortBy="new Func<DepartmentClass, object>(e => e.Title)">
                Título
            </MudTableSortLabel>
        </MudTh>

       

    </HeaderContent>

    <RowTemplate>

        <MudTd DataLabel="Título">@context.Title</MudTd>

      
    </RowTemplate>

    <RowEditingTemplate>

        <MudTd DataLabel="Departamentos">
            <MudTextField  @bind-Value="context.Title" Required />
        </MudTd>
  





    </RowEditingTemplate>


    <PagerContent >
        <MudTablePager PageSizeOptions="[5, 15, 25, 50, 100]"


                       RowsPerPageString="Máximo de departamentos por página:"

        />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction"  />
    </EditButtonContent>
</MudTable>











@code{
    [Parameter]
    public List<DepartmentClass> Departments { get; set; } = new List<DepartmentClass>();
    private HashSet<DepartmentClass> selectedItems = new HashSet<DepartmentClass>();  // Changed to HashSet

    protected override async Task OnInitializedAsync()
    {
        // Exemplo de inicialização
        Departments = new List<DepartmentClass>
        {
            new DepartmentClass { Id = 1, Title = "Suporte" },
            new DepartmentClass { Id = 2, Title = "Financeiro" },
        };
    }


    public Origin TransformOrigin { get; set; } = Origin.TopCenter;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;
    private string criterio = "";
    private bool _readOnly;
    
    private async Task StartAddItem(DepartmentClass item)
    {
        var options = new DialogOptions { CloseButton = true };
        var dialog = DialogService.Show<DialogAddDepartment>("Adicionar resposta rápida", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is DepartmentClass newItem)
        {
            Departments.Add(newItem);
            StateHasChanged();
        }
    }

    private void DeleteSelectedItems()
    {
        if (selectedItems.Count > 0)
        {
            foreach (var item in selectedItems)
            {
                Departments.Remove(item);
            }
            selectedItems.Clear();
            StateHasChanged(); // Refresh the table after deletion
        }
    }

    private bool Procurar(DepartmentClass departmentsearch)
    {
        if (string.IsNullOrWhiteSpace(criterio))
            return true;

        return departmentsearch.Id.ToString().Contains(criterio, StringComparison.OrdinalIgnoreCase)
               || departmentsearch.Title.Contains(criterio, StringComparison.OrdinalIgnoreCase);
    }

 

}
