@page "/"



<div class="">
    
    <p Style="background: transparent" Class="titleTabPanel mud-tabs-tabbar-tertiary " >Configurações</p>
    
    <MudTabs AlwaysShowScrollButtons="true" MinimumTabWidth="240px" HeaderPosition="TabHeaderPosition.After"  Centered="true"  SliderColor="Color.Primary" Color="Color.Tertiary" Outlined="true" Class="mt-0 w-full h-full" Position="@Position" Rounded="true" Border="true" ApplyEffectsToContainer="true">




        <!-- Ajustes Gerais Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.Tune" Text="Ajustes gerais">

          <GeneralAjust></GeneralAjust>
        </MudTabPanel>

        <!-- Respostas Rápidas Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.Bolt" Text="Respostas Rápidas">
            <QuickResponse></QuickResponse>
        </MudTabPanel>

        <!-- Departamentos Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.PeopleAlt" Text="Departamentos">
            <Department></Department>
        </MudTabPanel>

        <!-- Usuários Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.Person" Text="Usuários">
            <Users></Users>
        </MudTabPanel>

        <!-- Contatos Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.Contacts" Text="Contatos">
            <Contacts></Contacts>
        </MudTabPanel>

        <!-- Etiquetas Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.Label" Text="Etiquetas">
            <Labels></Labels>
        </MudTabPanel>

        <!-- Motivos de Finalização Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.CheckCircle" Text="Motivos de Finalização">
            <ReasonForTermination></ReasonForTermination>
        </MudTabPanel>

        <!-- Pagamento Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.Payment" Text="Pagamento">
           <Payment></Payment>
        </MudTabPanel>

        <!-- Meus Dados Tab -->
        <MudTabPanel Icon="@Icons.Material.Filled.AccountBox" Text="Meus dados">
          <Profile></Profile>
        </MudTabPanel>

    </MudTabs>
</div>



<style>

    .mud-tabs-panels.mud-tabs-vertical{
        display: grid
        !important;
    }
    .mud-tabs-tabbar.mud-tabs-vertical .mud-tabs-tabbar-inner{
        margin-top: 100px;
    }
    .mud-tabs-tabbar-content{

        width: 240px;
        
    }
</style>
@code {
    private ScreenSize screenSize = new ScreenSize();
    public Position Position { get; set; } = Position.End;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
            var dotNetObjectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setDotNetResizeCallback", dotNetObjectReference);
            // Invoca o JavaScript para bloquear a tecla Enter
            await JSRuntime.InvokeVoidAsync("blockEnterKey", "#messageInput");
            // Atualiza o tamanho da tela após o primeiro carregamento
            // Chama a função getScreenSize para obter o tamanho inicial da tela
            screenSize = await JSRuntime.InvokeAsync<ScreenSize>("getScreenSize");
           
            if (screenSize.Width <= 800)
            {
                Position = Position.Top;
            }
            else
            {
            
                Position = Position.End;
            
            }
            StateHasChanged(); // Solicita uma atualização da interface
        }
        
    }

    [JSInvokable]
    public Task UpdateScreenSize(ScreenSize newScreenSize)
    {
        
        screenSize = newScreenSize; // Atualiza a propriedade screenSize
        if (screenSize.Width <= 800)
        {
            Position = Position.Top;
        }
        else
        {
            
            Position = Position.End;
            
        }
        StateHasChanged(); // Solicita uma atualização da interface do usuário
        return Task.CompletedTask;
    }
}