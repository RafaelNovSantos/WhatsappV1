

<MudTable T="ContactsClass" Items="@Contacts"
          ApplyButtonPosition="TableApplyButtonPosition.End" EditButtonPosition="TableEditButtonPosition.End"       EditTrigger="TableEditTrigger.EditButton"   Filter="new Func<ContactsClass, bool>(Procurar)" Hover="true"
          MultiSelection="true"
          Bordered="true" Dense="true" Class="tableEdit" ReadOnly="@_readOnly"
          @bind-SelectedItems="selectedItems">


    <ToolBarContent >

        <MudText Class="MudTextSize">Contatos</MudText>
        <div class="InputContainer ma-5 mud-elevation-1">
            <input type="text"             placeholder="Procurar..."

                   @bind="criterio"
                   name="text" class="searchinput" id="input" >
            <div class="border"></div>

            <label for="input" class="labelforsearch">
                <svg viewBox="0 0 512 512" class="searchIcon"><path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z"></path></svg>
            </label>

        </div>

        <button class="bookmarkBtn ma-1" @onclick="() => StartAddItem(new ContactsClass())">
            <span class="IconContainer">
                <MudIcon Color="Color.Dark" Icon="@Icons.Material.Outlined.Add"></MudIcon>
            </span>
            <p class="text">Adicionar</p>
        </button>

        <button class="bookmarkBtn ma-1" @onclick="DeleteSelectedItems">
            <span class="IconContainer">
                <MudIcon Color="Color.Error" Icon="@Icons.Material.Outlined.Delete"></MudIcon>
            </span>
            <p class="text">Deletar</p>
        </button>
    </ToolBarContent>

    <HeaderContent >
    


   
      

        <MudTh>
            <MudTableSortLabel SortBy="new Func<ContactsClass, object>(e => e.Name)">
                Contatos
            </MudTableSortLabel>
        </MudTh>


        <MudTh>
            <MudTableSortLabel SortBy="new Func<ContactsClass, object>(e => e.Tel)">
                Telefone
            </MudTableSortLabel>
        </MudTh>


        

    </HeaderContent>

    <RowTemplate>

        <MudTd DataLabel="Contatos">@context.Name</MudTd>
        <MudTd DataLabel="ID">@context.Tel</MudTd>

       

     
    </RowTemplate>
    <RowEditingTemplate>

        <MudTd DataLabel="Contatos">
            <MudTextField  @bind-Value="context.Name" Required />
            </MudTd>
        <MudTd DataLabel="Telefine"> <MudTextField @bind-Value="context.Tel" Mask="@(new PatternMask("(00) 0000-0000"))" Required /></MudTd>

      

       
        
    </RowEditingTemplate>


    <PagerContent >
        <MudTablePager PageSizeOptions="[5, 15, 25, 50, 100]"


                       RowsPerPageString="Máximo de contatos por página:"

        />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction"  />
    </EditButtonContent>
</MudTable>






@code{
    [Parameter]
    public List<ContactsClass> Contacts { get; set; } = new List<ContactsClass>();
    
    private HashSet<ContactsClass> selectedItems = new HashSet<ContactsClass>();  // Changed to HashSet

    protected override async Task OnInitializedAsync()
    {
        // Exemplo de inicialização
        Contacts = new List<ContactsClass>
        {
            new ContactsClass { Id = 1, Name = "Mauricio", Tel = "11 96483-3456"},
            new ContactsClass { Id = 2, Name = "Douglas", Tel = "11 98374-9487"},
        };
    }


    public Origin TransformOrigin { get; set; } = Origin.TopCenter;
    public Origin AnchorOrigin { get; set; } = Origin.BottomLeft;
    private string criterio = "";
    private bool _readOnly;

    private async Task StartAddItem(ContactsClass item)
    {
        var options = new DialogOptions { CloseButton = true };
        var dialog = DialogService.Show<DialogAddContacts>("Adicionar resposta rápida", options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ContactsClass newItem)
        {
            Contacts.Add(newItem);
            StateHasChanged();
        }
    }

    private void DeleteSelectedItems()
    {
        if (selectedItems.Count > 0)
        {
            foreach (var item in selectedItems)
            {
                Contacts.Remove(item);
            }
            selectedItems.Clear();
            StateHasChanged(); // Refresh the table after deletion
        }
    }
    
    private bool Procurar(ContactsClass welcomemessage)
    {
        if (string.IsNullOrWhiteSpace(criterio))
            return true;

        return welcomemessage.Id.ToString().Contains(criterio, StringComparison.OrdinalIgnoreCase)
               || welcomemessage.Name.Contains(criterio, StringComparison.OrdinalIgnoreCase);
    }

 

}
