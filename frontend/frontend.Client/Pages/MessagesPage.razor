@*@page "/{ContacId}"*@
@page "/"
@using System.Net.Http
@using System.Text.Json
@using System.Text.Json.Serialization;


@inject IJSRuntime JSRuntime


<PageTitle>Chat</PageTitle>

<div class="d-flex flex-grow-1 flex-row " style="position: fixed; height: 100vh; width: 100vw;">
    <!-- Barra lateral com contatos -->
    <MudPaper Elevation="25" Class="pa-3" Style="width: 25%; overflow: auto; background-color: #f5f5f5;">
        <MudTextField T="string" Placeholder="Buscar mensagens" Variant="Variant.Outlined" AdornmentIcon="@Icons.Material.Filled.Search" />

        <MudToolBar Dense="true" Class="mt-4">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2 text-primary">#</MudText>
            <MudText Typo="Typo.h6" Color="Color.Primary">Contatos</MudText>
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh; overflow:auto;">
            <MudList T="ChatService" Clickable="true">
                @foreach (var chat in ChatService.Chats)
                {
                    <MudListItem T="Chat" Class="pa-0 mb-3" OnClick="@(() => LoadUserChat(chat.Username))">
                        <div class="d-flex flex-row align-items-center">
                            <MudAvatar Color="@(chat.Username == ContactId ? Color.Primary : Color.Dark)" Style="height:40px; width:40px;">
                                @chat.Username.ToUpper().FirstOrDefault()
                            </MudAvatar>
                            <div class="ml-3">
                                <MudText Typo="Typo.subtitle2">@chat.Username</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Primary">@chat.Tag</MudText>
                                @if (chat.HasUnreadMessages)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" Class="ml-1" />
                                }
                            </div>
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>

    <!-- Área Principal de Chat -->
    <MudPaper Elevation="25" Class="flex-grow-1  " Style="background: #fafafa">
        <!-- Barra de título do chat -->
        <MudToolBar Dense="true" Class="px-4">
            @if (string.IsNullOrEmpty(ContactId))
            {
                <MudIcon Icon="@Icons.Material.Outlined.Person" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.h6" Color="Color.Primary">Chat</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px" Color="Color.Primary"></MudIcon>
                <MudText Typo="Typo.h6">@ContactEmail</MudText>
            }

            <div Class="full-width flex-end">

                <MudMenu FullWidth="true">
                    <ActivatorContent>
                        <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Transferir</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>Profile</MudMenuItem>
                        <MudMenuItem>Theme</MudMenuItem>
                        <MudMenuItem>Usage</MudMenuItem>
                        <MudMenuItem>Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>

                <MudMenu FullWidth="true">
                    <ActivatorContent>
                        <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Etiquetas</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>Profile</MudMenuItem>
                        <MudMenuItem>Theme</MudMenuItem>
                        <MudMenuItem>Usage</MudMenuItem>
                        <MudMenuItem>Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>

                <MudMenu FullWidth="true">
                    <ActivatorContent>
                        <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Agendar</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>Profile</MudMenuItem>
                        <MudMenuItem>Theme</MudMenuItem>
                        <MudMenuItem>Usage</MudMenuItem>
                        <MudMenuItem>Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>

                <MudMenu FullWidth="true">
                    <ActivatorContent>
                        <MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Finalizar</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>Profile</MudMenuItem>
                        <MudMenuItem>Theme</MudMenuItem>
                        <MudMenuItem>Usage</MudMenuItem>
                        <MudMenuItem>Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>

                <MudMenu AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Archive">Arquivar Chat</MudMenuItem>
                    <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Outlined.NotificationsOff">Silenciar Chat</MudMenuItem>
                    <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Block">Bloquear</MudMenuItem>
                </MudMenu>
            </div>
        </MudToolBar>

        <!-- Área de mensagens -->
        <div class="d-flex flex-column px-4" style="height:100%; padding-bottom: 200px !important; overflow:auto; background-image: url('images/fundo_Whatsapp.png'); background-size: cover; background-position: center;" id="chatContainer">
            @foreach (var message in ChatService.Messages.Where(m => m.Sender == ContactId || m.Receiver == ContactId))
            {
                @if (message.Sender == "Você")
                {
                    <div class="d-flex my-4 justify-end">
                        <!-- Mensagens enviadas por você -->
                        <div class="message-bubble" style="background-color: #def9c8; overflow: auto;">
                            <MudText Typo="Typo.body1" Style="font-weight: bold;">@message.Sender</MudText>
                            <pre Typo="Typo.body2">@message.Content</pre>
                            <div class="justify-end d-flex">
                                <MudText Typo="Typo.caption" Style=" font-size: xx-small!important; text-align: right; color: #666;">
                                    @DateTime.Now.ToString("HH:mm'h'")
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify iconify--ph" width="1em" height="1em" viewBox="0 0 256 256" style="vertical-align: -0.125em;"><path fill="currentColor" d="m152.41 88.56l-89.6 88a12 12 0 0 1-16.82 0l-38.4-37.71a12 12 0 0 1 16.82-17.13l30 29.46l81.19-79.74a12 12 0 0 1 16.82 17.12Zm96.15-17a12 12 0 0 0-17-.15l-81.16 79.77l-7.88-7.74a12 12 0 0 0-16.82 17.12l16.29 16a12 12 0 0 0 16.82 0l89.6-88a12 12 0 0 0 .15-16.97Z"></path></svg>
                                </MudText>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Mensagens enviadas por outros usuários -->
                    <div class="d-flex my-4">
                        @if (group == true)
                        {
                            <div class="mr-2">
                                <MudAvatar Color="Color.Secondary" Style="height:40px; width:40px;">@message.Sender.ToUpper().FirstOrDefault()</MudAvatar>
                            </div>
                        }
                        <div class="message-bubble" style="background-color: white; overflow: auto;">
                            @if (group == true)
                            {
                                <MudText Typo="Typo.body1" Style="font-weight: bold;">@message.Sender</MudText>
                            }
                            <pre Typo="Typo.body2">@message.Content</pre>
                            <div class="justify-end d-flex">
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important; text-align: right; color: #666;">
                                    @DateTime.Now.ToString("HH:mm'h'")
                                </MudText>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>


        <!-- Campo para envio de mensagem -->
        <div style="bottom: 0;
    position: fixed;
    display: flex;">



            <div class="messageBox mud-elevation-1">
                <div class="fileUploadWrapper">
                    <MudMenu AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Dense="true" Icon="@Icons.Material.Filled.Add" AriaLabel="Abrir menu">
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Dark" Icon="@Icons.Material.Outlined.Image">
                            Foto e Vídeo
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Success" Icon="@Icons.Material.Filled.FileUpload">
                            Documento
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Info" Icon="@Icons.Material.Filled.Contacts">
                            Contato
                        </MudMenuItem>
                        <MudMenuItem IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Comment">
                            Comentário
                        </MudMenuItem>
                    </MudMenu>

                </div>
                <textarea @bind="newMessageContent"
                          @oninput="e => newMessageContent = e.Value.ToString()"
                          @onkeydown="HandleKeyDown"
                          placeholder="Mensagem"
                          id="messageInput"
                          style="resize: none;"></textarea>
                <button id="sendButton" @onclick="SendMessage">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 664 663">
                        <path fill="none"
                              d="M646.293 331.888L17.7538 17.6187L155.245 331.888M646.293 331.888L17.753 646.157L155.245 331.888M646.293 331.888L318.735 330.228L155.245 331.888"></path>
                        <path stroke-linejoin="round"
                              stroke-linecap="round"
                              stroke-width="33.67"
                              stroke="#6c6c6c"
                              d="M646.293 331.888L17.7538 17.6187L155.245 331.888M646.293 331.888L17.753 646.157L155.245 331.888M646.293 331.888L318.735 330.228L155.245 331.888"></path>
                    </svg>
                </button>
            </div>



        </div>

    </MudPaper>

</div>




<script>

    function scrollToElement(elementId) {
        const element = document.getElementById(elementId);
        if (element) {

            element.scrollTop = 1500;
            console.log(`Rolagem para o elemento com ID: ${elementId} realizada com sucesso.`);
        } else {
            console.log(`Elemento com ID: ${elementId} não encontrado.`);
        }
    }




</script>

@code {
    public Origin TransformOrigin { get; set; } = Origin.BottomCenter;
    public Origin AnchorOrigin { get; set; } = Origin.TopCenter;
    private bool group = false;
    private bool IsOnline = false;
    private bool HasUnreadMessages = false;
    public ChatService ChatService = new ChatService();


    // Variáveis para armazenar o ID e o email do contato atual
    [Parameter]
    public string ContactId { get; set; } // ID do contato (usado na barra de título)

    private void LoadUserChat(string username)
    {
        ContactId = username;
        StateHasChanged(); // Atualiza a interface
    }


    private string ContactEmail
    {
        get
        {
            var chat = ChatService.Chats.FirstOrDefault(c => c.Username == ContactId);
            return chat != null ? chat.Username : "Unknown";
        }
    }


    private async Task HandleKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter" && !e.ShiftKey)
        {
            // Encontra a última ocorrência de '\n' e remove apenas essa ocorrência
            int lastIndex = newMessageContent.LastIndexOf('\n');
            if (newMessageContent == "")
            {
                newMessageContent = string.Empty;
            }
            if (lastIndex >= 0)
            {
                newMessageContent = newMessageContent.Remove(lastIndex, 1);
            }
            if (System.Text.RegularExpressions.Regex.IsMatch(newMessageContent, @"^\n*$"))
            {
                newMessageContent = string.Empty;
            }
            // Envia a mensagem
            if (!string.IsNullOrEmpty(newMessageContent) && !System.Text.RegularExpressions.Regex.IsMatch(newMessageContent, @"^\n*$"))
            {
                // Conteúdo não é vazio e não contém apenas quebras de linha
                SendMessage();
                await Task.Delay(1);
                newMessageContent = string.Empty; // Limpa o campo de entrada após o envio
            }

        }


    }

    private HttpClient HttpClient { get; } = new HttpClient();
    

    protected override async Task OnInitializedAsync()
    {
        var chatId = "5511975208157";  // Exemplo de ID de chat
        var url = $"http://localhost:3000/last-messages?chatId={chatId}";

        try
        {
            var response = await HttpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();

                try
                {
                    var inputMessages = JsonSerializer.Deserialize<InputJsonMessageResponse>(responseContent);

                    if (inputMessages != null && inputMessages.Messages != null)
                    {
                        foreach (var msg in inputMessages.Messages)
                        {
                            ChatService.Messages.Add(msg.ToMessage());
                        }
                    }
                    else
                    {
                        Console.WriteLine("Nenhuma mensagem encontrada ou mensagem inválida.");
                    }
                }
                catch (JsonException ex)
                {
                    Console.WriteLine($"Erro ao processar os dados retornados pela API: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine($"Erro ao obter mensagens da API. Status Code: {response.StatusCode}");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Erro ao fazer a requisição: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro inesperado: {ex.Message}");
        }

        StateHasChanged();
    }


    public class InputJsonMessageResponse
    {
        [JsonPropertyName("status")]
        public string Status { get; set; }

        [JsonPropertyName("messages")]
        public List<InputJsonMessage> Messages { get; set; }
    }


    private async void SearchMessage()
    {
        var chatId = "5511975208157";  // Exemplo de ID de chat
        var url = $"http://localhost:3000/last-messages?chatId={chatId}";

        try
        {
            // Fazendo a chamada HTTP para obter as mensagens
            var response = await HttpClient.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                // Lê o conteúdo da resposta como string
                var responseContent = await response.Content.ReadAsStringAsync();

                try
                {
                    var inputMessages = JsonSerializer.Deserialize<InputJsonMessageResponse>(responseContent);

                    if (inputMessages != null && inputMessages.Messages != null)
                    {
                        // Adiciona todas as mensagens retornadas da API
                        foreach (var msg in inputMessages.Messages)
                        {
                            ChatService.Messages.Add(new Message
                                {
                                    Sender = "Você",
                                    Receiver = ContactId,
                                    Content = msg.Content,
                                    Timestamp = DateTime.Now
                                }
                            );
                            StateHasChanged();
                            ChatService.Messages.Add(msg.ToMessage());
                        }
                    }
                    else
                    {
                        Console.WriteLine("Nenhuma mensagem encontrada ou mensagem inválida.");
                    }
                }
                catch (JsonException ex)
                {
                    // Tratar erros de deserialização
                    Console.WriteLine($"Erro ao processar os dados retornados pela API: {ex.Message}");
                }
            }
            else
            {
                // Se a resposta não for bem-sucedida
                Console.WriteLine($"Erro ao obter mensagens da API. Status Code: {response.StatusCode}");
            }
        }
        catch (HttpRequestException ex)
        {
            // Tratar falhas de conexão ou outros problemas na requisição HTTP
            Console.WriteLine($"Erro ao fazer a requisição: {ex.Message}");
        }
        catch (Exception ex)
        {
            // Tratar outras exceções inesperadas
            Console.WriteLine($"Erro inesperado: {ex.Message}");
        }

        // Atualiza o estado da UI (independente de sucesso ou erro)
        StateHasChanged();
    }


    private string newMessageContent;



    private async void SendMessage()
    {
        if (!string.IsNullOrEmpty(newMessageContent) && !string.IsNullOrEmpty(ContactId))
        {

            var Contact = ChatService.Chats.FirstOrDefault(c => c.Username == ContactId);
            if (Contact != null && Contact.Telefone_Number != null)
            {
                try
                {
                    var url = $"http://localhost:3000/send-message?number={Contact.Telefone_Number}&message={Uri.EscapeDataString(newMessageContent)}";

                    var response = await HttpClient.GetAsync(url);

                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Mensagem enviada com sucesso!");
                    }
                    else
                    {
                        Console.WriteLine($"Erro ao enviar mensagem: {response.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Erro: {ex.Message}");
                }

                // Atualiza o estado da UI
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Contato não encontrado ou número de telefone inválido.");
            }
            SearchMessage();
            StateHasChanged();
        return;
    }

    ChatService.Messages.Add(new Message
        {
            Sender = "Você",
            Receiver = ContactId,
            Content = newMessageContent,
            Timestamp = DateTime.Now
    });

        newMessageContent = string.Empty; // Limpa o campo de entrada
        await JSRuntime.InvokeVoidAsync("scrollToElement", "chatContainer");
    StateHasChanged(); // Atualiza a interface
}
    }




}
